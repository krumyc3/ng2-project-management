
type Project @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User @relation(name: "ProjectAuthor")
  tasks: [Task!]! @relation(name: "TasksOnProject")
  client: Client @relation(name: "ProjectsOnClient")
  name: String!
  description: String!
} 

type Task @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User @relation(name: "TaskAuthor")
  project: Project @relation(name: "TasksOnProject")
  comments: [Comment!]! @relation(name: "CommentsOnTask")
  title: String!
  description: String!
  due: DateTime
  status: String @defaultValue(value: "No status") @migrationValue(value: "No status")

}

type Comment @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User @relation(name: "CommentAuthor")
  task: Task @relation(name: "CommentsOnTask")
  content: String!
  likes: Int @defaultValue(value: 0)
}

type Client @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User @relation(name: "ClientAuthor")
  
  projects: [Project!]! @relation(name: "ProjectsOnClient")
  name: String!
}

# added by email-password template: (please uncomment)
type User @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)
  firstName: String! @migrationValue(defaultValue: "Test first name")
  lastName: String! @migrationValue(defaultValue: "Test last name")
  role: UserRole @migrationValue(defaultValue: DEVELOPER) 
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  projects: [Project!]! @relation(name: "ProjectAuthor")
  tasks: [Task!]! @relation(name: "TaskAuthor")
  comment: [Comment!]! @relation(name: "CommentAuthor")
  clients: [Client!]! @relation(name: "ClientAuthor")
  email: String! @isUnique
  password: String!
}

enum UserRole {
  PRODUCT_OWNER
  PROJECT_MANAGER
  DEVELOPER
  DESIGNER
  QA
}